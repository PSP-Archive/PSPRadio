/* 
	PSPRadio / Music streaming client for the PSP. (Initial Release: Sept. 2005)
	PSPRadio Copyright (C) 2005 Rafael Cabezas a.k.a. Raf
	SandbergUI Copyright (C) 2005 Jesper Sandberg


	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
#include <list>
#include <PSPApp.h>
#include <PSPSound.h>
#include <stdio.h>
#include <unistd.h> 
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <malloc.h>
#include <math.h>
#include <time.h>
#include <iniparser.h>
#include <Tools.h>
#include <stdarg.h>
#include <Logging.h>

#include <pspkernel.h>
#include <pspdisplay.h>

#include <pspgu.h>
#include <pspgum.h>

#include "SandbergUI.h"

#define BUF_WIDTH (512)
#define SCR_WIDTH (480)
#define SCR_HEIGHT (272)
#define PIXEL_SIZE (4) /* change this if you change to another screenmode */
#define FRAME_SIZE (BUF_WIDTH * SCR_HEIGHT * PIXEL_SIZE)
#define ZBUF_SIZE (BUF_WIDTH SCR_HEIGHT * 2) /* zbuffer seems to be 16-bit? */

#define ACTIVE_COLOR	0xFFFFFFFF
#define INACTIVE_COLOR	0xFF444444

static unsigned char bplay[] __attribute__((aligned(16))) = {
	0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x00, 0x2c, 0x2c, 0x2c, 0x00, 0x2a, 0x2a, 0x2a, 0x00, 0x2a, 0x2a, 0x2a, 0x00, 0x29, 0x29, 0x29, 0x00, 0x26, 0x26, 0x26, 0x00, 0x28, 0x28, 0x28, 0x00, 
	0x2a, 0x2a, 0x2a, 0x00, 0x29, 0x29, 0x29, 0x00, 0x28, 0x28, 0x28, 0x00, 0x27, 0x27, 0x27, 0x00, 0x24, 0x24, 0x24, 0x00, 0x21, 0x21, 0x21, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x42, 0x42, 0x00, 0xf9, 0xf9, 0xf9, 0x00, 0xf0, 0xf0, 0xf0, 0x00, 0xea, 0xea, 0xea, 0x00, 0xe9, 0xe9, 0xe9, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 
	0xe8, 0xe8, 0xe8, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe5, 0xe5, 0xe5, 0x00, 0xda, 0xda, 0xda, 0x00, 0xb8, 0xb8, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x2d, 0x2d, 0x2d, 0x00, 0xf0, 0xf0, 0xf0, 0x00, 0xdb, 0xdf, 0xe5, 0x00, 0xc9, 0xcf, 0xd7, 0x00, 0xc8, 0xce, 0xd6, 0x00, 0xc7, 0xce, 0xd6, 0x00, 0xcc, 0xd1, 0xd9, 0x00, 0xc6, 0xcd, 0xd5, 0x00, 
	0xc7, 0xcd, 0xd5, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc6, 0xcc, 0xd5, 0x00, 0xae, 0xb6, 0xc0, 0x00, 0x7c, 0x84, 0x8f, 0x00, 0x8f, 0x8f, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x2a, 0x2a, 0x2a, 0x00, 0xea, 0xea, 0xea, 0x00, 0xc9, 0xcf, 0xd7, 0x00, 0xcb, 0xd1, 0xd8, 0x00, 0xc1, 0xc7, 0xd0, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xf4, 0xf5, 0xf7, 0x00, 0xd5, 0xd7, 0xda, 0x00, 
	0xbd, 0xc4, 0xcc, 0x00, 0xbf, 0xc6, 0xce, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xbe, 0xc5, 0xce, 0x00, 0x7b, 0x83, 0x8e, 0x00, 0x65, 0x6d, 0x77, 0x00, 0x9a, 0x9a, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x29, 0x29, 0x29, 0x00, 0xe9, 0xe9, 0xe9, 0x00, 0xc8, 0xce, 0xd6, 0x00, 0xc1, 0xc7, 0xd0, 0x00, 0xc1, 0xc7, 0xd0, 0x00, 0xba, 0xc1, 0xca, 0x00, 0xff, 0xff, 0xff, 0x00, 0xf8, 0xf8, 0xf8, 0x00, 
	0xb6, 0xb9, 0xbc, 0x00, 0x9b, 0xa2, 0xad, 0x00, 0xb7, 0xbe, 0xc7, 0x00, 0x94, 0x9c, 0xa8, 0x00, 0x6c, 0x74, 0x7f, 0x00, 0x7d, 0x86, 0x91, 0x00, 0xa3, 0xa3, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x29, 0x29, 0x29, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc7, 0xce, 0xd6, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xba, 0xc1, 0xca, 0x00, 0xb9, 0xc0, 0xc9, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 
	0xef, 0xef, 0xef, 0x00, 0xd1, 0xd3, 0xd5, 0x00, 0xb3, 0xb9, 0xc2, 0x00, 0x84, 0x8c, 0x97, 0x00, 0x81, 0x89, 0x94, 0x00, 0x7f, 0x87, 0x92, 0x00, 0x8d, 0x8d, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x29, 0x29, 0x29, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xba, 0xc1, 0xca, 0x00, 0xb4, 0xbb, 0xc5, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 
	0xff, 0xff, 0xff, 0x00, 0xfa, 0xfa, 0xfa, 0x00, 0xae, 0xb0, 0xb3, 0x00, 0x7c, 0x84, 0x8e, 0x00, 0x7b, 0x83, 0x8e, 0x00, 0x73, 0x7b, 0x86, 0x00, 0x86, 0x86, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x29, 0x29, 0x29, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xba, 0xc1, 0xca, 0x00, 0xb4, 0xbb, 0xc5, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 
	0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xf0, 0xf0, 0xf0, 0x00, 0x94, 0x97, 0x9a, 0x00, 0x74, 0x7c, 0x86, 0x00, 0x72, 0x7a, 0x84, 0x00, 0x86, 0x86, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x28, 0x28, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xba, 0xc1, 0xca, 0x00, 0xb4, 0xbb, 0xc5, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 
	0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xce, 0xce, 0xce, 0x00, 0x91, 0x93, 0x97, 0x00, 0x6d, 0x74, 0x7d, 0x00, 0x6f, 0x77, 0x81, 0x00, 0x86, 0x86, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x28, 0x28, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xba, 0xc1, 0xca, 0x00, 0xb2, 0xba, 0xc3, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 
	0xff, 0xff, 0xff, 0x00, 0xd0, 0xd0, 0xd0, 0x00, 0x95, 0x97, 0x9a, 0x00, 0x68, 0x6e, 0x77, 0x00, 0x6d, 0x74, 0x7d, 0x00, 0x6f, 0x77, 0x81, 0x00, 0x86, 0x86, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x28, 0x28, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xb9, 0xc0, 0xca, 0x00, 0x9d, 0xa5, 0xb0, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 
	0xce, 0xce, 0xce, 0x00, 0x95, 0x97, 0x9a, 0x00, 0x6b, 0x71, 0x79, 0x00, 0x71, 0x78, 0x81, 0x00, 0x74, 0x7c, 0x86, 0x00, 0x72, 0x7a, 0x84, 0x00, 0x85, 0x85, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x28, 0x28, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc6, 0xcc, 0xd5, 0x00, 0xbf, 0xc6, 0xce, 0x00, 0x9c, 0xa4, 0xaf, 0x00, 0x84, 0x8c, 0x97, 0x00, 0xff, 0xff, 0xff, 0x00, 0xca, 0xca, 0xca, 0x00, 
	0x91, 0x94, 0x97, 0x00, 0x66, 0x6d, 0x75, 0x00, 0x71, 0x78, 0x81, 0x00, 0x7a, 0x81, 0x8c, 0x00, 0x7b, 0x83, 0x8e, 0x00, 0x72, 0x7a, 0x85, 0x00, 0x85, 0x85, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x23, 0x23, 0x23, 0x00, 0xe7, 0xe7, 0xe7, 0x00, 0xc5, 0xcb, 0xd3, 0x00, 0x9a, 0xa2, 0xad, 0x00, 0x7c, 0x85, 0x90, 0x00, 0x7c, 0x84, 0x8f, 0x00, 0xb2, 0xb6, 0xbb, 0x00, 0x8f, 0x92, 0x95, 0x00, 
	0x66, 0x6d, 0x75, 0x00, 0x6a, 0x70, 0x7a, 0x00, 0x74, 0x7c, 0x86, 0x00, 0x7b, 0x83, 0x8e, 0x00, 0x7a, 0x82, 0x8d, 0x00, 0x72, 0x7a, 0x85, 0x00, 0x84, 0x84, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0x1f, 0x1f, 0x00, 0xda, 0xda, 0xda, 0x00, 0x96, 0x9e, 0xa9, 0x00, 0x73, 0x7b, 0x86, 0x00, 0x73, 0x7b, 0x86, 0x00, 0x73, 0x7b, 0x86, 0x00, 0x71, 0x78, 0x82, 0x00, 0x6b, 0x73, 0x7d, 0x00, 
	0x64, 0x6b, 0x74, 0x00, 0x69, 0x70, 0x7a, 0x00, 0x72, 0x7a, 0x84, 0x00, 0x72, 0x7a, 0x85, 0x00, 0x72, 0x7a, 0x85, 0x00, 0x6e, 0x76, 0x81, 0x00, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x02, 0x02, 0x02, 0x00, 0xb9, 0xb9, 0xb9, 0x00, 0x8e, 0x8e, 0x8e, 0x00, 0x87, 0x87, 0x87, 0x00, 0x86, 0x86, 0x86, 0x00, 0x83, 0x83, 0x83, 0x00, 0x85, 0x85, 0x85, 0x00, 0x82, 0x82, 0x82, 0x00, 
	0x7f, 0x7f, 0x7f, 0x00, 0x86, 0x86, 0x86, 0x00, 0x88, 0x88, 0x88, 0x00, 0x85, 0x85, 0x85, 0x00, 0x84, 0x84, 0x84, 0x00, 0x7c, 0x7c, 0x7c, 0x00, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};


static unsigned char bstop[] __attribute__((aligned(16))) = {
	0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x00, 0x2c, 0x2c, 0x2c, 0x00, 0x2a, 0x2a, 0x2a, 0x00, 0x2a, 0x2a, 0x2a, 0x00, 0x29, 0x29, 0x29, 0x00, 0x26, 0x26, 0x26, 0x00, 0x28, 0x28, 0x28, 0x00, 
	0x2a, 0x2a, 0x2a, 0x00, 0x29, 0x29, 0x29, 0x00, 0x28, 0x28, 0x28, 0x00, 0x27, 0x27, 0x27, 0x00, 0x24, 0x24, 0x24, 0x00, 0x21, 0x21, 0x21, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x42, 0x42, 0x42, 0x00, 0xf9, 0xf9, 0xf9, 0x00, 0xf0, 0xf0, 0xf0, 0x00, 0xea, 0xea, 0xea, 0x00, 0xe9, 0xe9, 0xe9, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 
	0xe8, 0xe8, 0xe8, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe5, 0xe5, 0xe5, 0x00, 0xda, 0xda, 0xda, 0x00, 0xb8, 0xb8, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x2d, 0x2d, 0x2d, 0x00, 0xf0, 0xf0, 0xf0, 0x00, 0xdb, 0xdf, 0xe5, 0x00, 0xc9, 0xcf, 0xd7, 0x00, 0xc8, 0xce, 0xd6, 0x00, 0xc7, 0xce, 0xd6, 0x00, 0xc9, 0xce, 0xd6, 0x00, 0xc6, 0xcd, 0xd5, 0x00, 
	0xc7, 0xcd, 0xd5, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc6, 0xcc, 0xd5, 0x00, 0xae, 0xb6, 0xc0, 0x00, 0x7c, 0x84, 0x8f, 0x00, 0x8f, 0x8f, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x2a, 0x2a, 0x2a, 0x00, 0xea, 0xea, 0xea, 0x00, 0xc9, 0xcf, 0xd7, 0x00, 0xcb, 0xd1, 0xd8, 0x00, 0xc1, 0xc7, 0xd0, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xc7, 0xcc, 0xd2, 0x00, 0xd2, 0xd4, 0xd7, 0x00, 
	0xbd, 0xc4, 0xcc, 0x00, 0xbf, 0xc6, 0xce, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xbe, 0xc5, 0xce, 0x00, 0x7b, 0x83, 0x8e, 0x00, 0x65, 0x6d, 0x77, 0x00, 0x9a, 0x9a, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x29, 0x29, 0x29, 0x00, 0xe9, 0xe9, 0xe9, 0x00, 0xc8, 0xce, 0xd6, 0x00, 0xc1, 0xc7, 0xd0, 0x00, 0xc1, 0xc7, 0xd0, 0x00, 0xba, 0xc1, 0xca, 0x00, 0xc1, 0xc6, 0xcc, 0x00, 0xd9, 0xd9, 0xd9, 0x00, 
	0xb1, 0xb4, 0xb8, 0x00, 0x9b, 0xa2, 0xad, 0x00, 0xb7, 0xbe, 0xc7, 0x00, 0x94, 0x9c, 0xa8, 0x00, 0x6c, 0x74, 0x7f, 0x00, 0x7d, 0x86, 0x91, 0x00, 0xa3, 0xa3, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x29, 0x29, 0x29, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc7, 0xce, 0xd6, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xc7, 0xcd, 0xd4, 0x00, 0xed, 0xef, 0xf1, 0x00, 0xee, 0xef, 0xf1, 0x00, 0xee, 0xee, 0xee, 0x00, 
	0xea, 0xea, 0xea, 0x00, 0xf3, 0xf3, 0xf4, 0x00, 0xec, 0xed, 0xf0, 0x00, 0xb2, 0xb7, 0xbe, 0x00, 0x81, 0x89, 0x94, 0x00, 0x7f, 0x87, 0x92, 0x00, 0x8d, 0x8d, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x29, 0x29, 0x29, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xcb, 0xd1, 0xd7, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 
	0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xbd, 0xc1, 0xc6, 0x00, 0x7b, 0x83, 0x8e, 0x00, 0x73, 0x7b, 0x86, 0x00, 0x86, 0x86, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x29, 0x29, 0x29, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xcb, 0xd1, 0xd7, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 
	0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xc9, 0xcb, 0xcc, 0x00, 0x74, 0x7c, 0x86, 0x00, 0x72, 0x7a, 0x84, 0x00, 0x86, 0x86, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x28, 0x28, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xcb, 0xd1, 0xd7, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 
	0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xc8, 0xc9, 0xcb, 0x00, 0x6d, 0x74, 0x7d, 0x00, 0x6f, 0x77, 0x81, 0x00, 0x86, 0x86, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x28, 0x28, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xcb, 0xd1, 0xd7, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 
	0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xb3, 0xb6, 0xbb, 0x00, 0x6d, 0x74, 0x7d, 0x00, 0x6f, 0x77, 0x81, 0x00, 0x86, 0x86, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x28, 0x28, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc7, 0xcd, 0xd5, 0x00, 0xc0, 0xc7, 0xcf, 0x00, 0xcb, 0xd0, 0xd7, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 
	0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xb8, 0xbb, 0xc0, 0x00, 0x74, 0x7c, 0x86, 0x00, 0x72, 0x7a, 0x84, 0x00, 0x85, 0x85, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x28, 0x28, 0x28, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xc6, 0xcc, 0xd5, 0x00, 0xbf, 0xc6, 0xce, 0x00, 0xb5, 0xbb, 0xc3, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 
	0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xbc, 0xc0, 0xc5, 0x00, 0x7b, 0x83, 0x8e, 0x00, 0x72, 0x7a, 0x85, 0x00, 0x85, 0x85, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x23, 0x23, 0x23, 0x00, 0xe7, 0xe7, 0xe7, 0x00, 0xc5, 0xcb, 0xd3, 0x00, 0x9a, 0xa2, 0xad, 0x00, 0x7c, 0x85, 0x90, 0x00, 0x7c, 0x84, 0x8f, 0x00, 0x84, 0x8a, 0x92, 0x00, 0x8f, 0x92, 0x95, 0x00, 
	0x66, 0x6d, 0x75, 0x00, 0x6a, 0x70, 0x7a, 0x00, 0x74, 0x7c, 0x86, 0x00, 0x7b, 0x83, 0x8e, 0x00, 0x7a, 0x82, 0x8d, 0x00, 0x72, 0x7a, 0x85, 0x00, 0x84, 0x84, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0x1f, 0x1f, 0x00, 0xda, 0xda, 0xda, 0x00, 0x96, 0x9e, 0xa9, 0x00, 0x73, 0x7b, 0x86, 0x00, 0x73, 0x7b, 0x86, 0x00, 0x73, 0x7b, 0x86, 0x00, 0x71, 0x78, 0x82, 0x00, 0x6b, 0x73, 0x7d, 0x00, 
	0x64, 0x6b, 0x74, 0x00, 0x69, 0x70, 0x7a, 0x00, 0x72, 0x7a, 0x84, 0x00, 0x72, 0x7a, 0x85, 0x00, 0x72, 0x7a, 0x85, 0x00, 0x6e, 0x76, 0x81, 0x00, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x02, 0x02, 0x02, 0x00, 0xb9, 0xb9, 0xb9, 0x00, 0x8e, 0x8e, 0x8e, 0x00, 0x87, 0x87, 0x87, 0x00, 0x86, 0x86, 0x86, 0x00, 0x83, 0x83, 0x83, 0x00, 0x85, 0x85, 0x85, 0x00, 0x82, 0x82, 0x82, 0x00, 
	0x7f, 0x7f, 0x7f, 0x00, 0x86, 0x86, 0x86, 0x00, 0x88, 0x88, 0x88, 0x00, 0x85, 0x85, 0x85, 0x00, 0x84, 0x84, 0x84, 0x00, 0x7c, 0x7c, 0x7c, 0x00, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

#define ROTSIZE		128

static float __attribute__((aligned(16))) sintable[] = {

0.000000f,0.024534f,0.049009f,0.073365f,0.097545f,0.121490f,0.145142f,0.168445f,
0.191342f,0.213778f,0.235698f,0.257051f,0.277785f,0.297850f,0.317197f,0.335779f,
0.353553f,0.370476f,0.386505f,0.401604f,0.415735f,0.428864f,0.440961f,0.451995f,
0.461940f,0.470772f,0.478470f,0.485016f,0.490393f,0.494588f,0.497592f,0.499398f,
0.500000f,0.499398f,0.497592f,0.494588f,0.490393f,0.485016f,0.478470f,0.470772f,
0.461940f,0.451995f,0.440961f,0.428864f,0.415735f,0.401604f,0.386505f,0.370476f,
0.353553f,0.335780f,0.317197f,0.297850f,0.277785f,0.257051f,0.235698f,0.213778f,
0.191342f,0.168445f,0.145142f,0.121490f,0.097545f,0.073365f,0.049009f,0.024534f,
-0.000000f,-0.024534f,-0.049009f,-0.073365f,-0.097545f,-0.121490f,-0.145142f,-0.168445f,
-0.191342f,-0.213778f,-0.235698f,-0.257051f,-0.277785f,-0.297850f,-0.317197f,-0.335779f,
-0.353553f,-0.370476f,-0.386505f,-0.401604f,-0.415735f,-0.428864f,-0.440961f,-0.451995f,
-0.461940f,-0.470772f,-0.478470f,-0.485016f,-0.490393f,-0.494588f,-0.497592f,-0.499398f,
-0.500000f,-0.499398f,-0.497592f,-0.494588f,-0.490393f,-0.485016f,-0.478470f,-0.470772f,
-0.461940f,-0.451995f,-0.440961f,-0.428864f,-0.415735f,-0.401604f,-0.386505f,-0.370475f,
-0.353553f,-0.335779f,-0.317197f,-0.297850f,-0.277785f,-0.257051f,-0.235698f,-0.213778f,
-0.191342f,-0.168445f,-0.145142f,-0.121490f,-0.097545f,-0.073365f,-0.049009f,-0.024534f,
};


static float __attribute__((aligned(16))) costable[] = {

1.000000f,0.998795f,0.995185f,0.989177f,0.980785f,0.970031f,0.956940f,0.941544f,
0.923880f,0.903989f,0.881921f,0.857729f,0.831470f,0.803208f,0.773010f,0.740951f,
0.707107f,0.671559f,0.634393f,0.595699f,0.555570f,0.514103f,0.471397f,0.427555f,
0.382683f,0.336890f,0.290285f,0.242980f,0.195090f,0.146730f,0.098017f,0.049068f,
-0.000000f,-0.049068f,-0.098017f,-0.146730f,-0.195090f,-0.242980f,-0.290285f,-0.336890f,
-0.382683f,-0.427555f,-0.471397f,-0.514103f,-0.555570f,-0.595699f,-0.634393f,-0.671559f,
-0.707107f,-0.740951f,-0.773010f,-0.803207f,-0.831470f,-0.857729f,-0.881921f,-0.903989f,
-0.923880f,-0.941544f,-0.956940f,-0.970031f,-0.980785f,-0.989176f,-0.995185f,-0.998795f,
-1.000000f,-0.998795f,-0.995185f,-0.989177f,-0.980785f,-0.970031f,-0.956940f,-0.941544f,
-0.923880f,-0.903989f,-0.881921f,-0.857729f,-0.831470f,-0.803208f,-0.773011f,-0.740951f,
-0.707107f,-0.671559f,-0.634393f,-0.595699f,-0.555570f,-0.514103f,-0.471397f,-0.427555f,
-0.382684f,-0.336890f,-0.290285f,-0.242980f,-0.195090f,-0.146730f,-0.098017f,-0.049068f,
0.000000f,0.049068f,0.098017f,0.146730f,0.195090f,0.242980f,0.290285f,0.336890f,
0.382684f,0.427555f,0.471397f,0.514103f,0.555570f,0.595699f,0.634393f,0.671559f,
0.707107f,0.740951f,0.773011f,0.803207f,0.831470f,0.857729f,0.881921f,0.903989f,
0.923880f,0.941544f,0.956940f,0.970031f,0.980785f,0.989177f,0.995185f,0.998795f,
};

struct Vertex
{
	float u, v;
	unsigned int color;
	float x,y,z;
};

static struct Vertex __attribute__((aligned(16))) play_button[2*3] =
{
	{0.0f, 1.0f, INACTIVE_COLOR,-0.25,-0.25, 0}, // 0
	{0.0f, 0.0f, INACTIVE_COLOR,-0.25, 0.25, 0}, // 4
	{1.0f, 0.0f, INACTIVE_COLOR, 0.25, 0.25, 0}, // 5

	{0.0f, 1.0f, INACTIVE_COLOR,-0.25,-0.25, 0}, // 0
	{1.0f, 0.0f, INACTIVE_COLOR, 0.25, 0.25, 0}, // 5
	{1.0f, 1.0f, INACTIVE_COLOR, 0.25,-0.25, 0}, // 1
};

static struct Vertex __attribute__((aligned(16))) stop_button[2*3] =
{
	{0.0f, 1.0f, ACTIVE_COLOR,-0.25,-0.25, 0}, // 0
	{0.0f, 0.0f, ACTIVE_COLOR,-0.25, 0.25, 0}, // 4
	{1.0f, 0.0f, ACTIVE_COLOR, 0.25, 0.25, 0}, // 5

	{0.0f, 1.0f, ACTIVE_COLOR,-0.25,-0.25, 0}, // 0
	{1.0f, 0.0f, ACTIVE_COLOR, 0.25, 0.25, 0}, // 5
	{1.0f, 1.0f, ACTIVE_COLOR, 0.25,-0.25, 0}, // 1
};


static unsigned int __attribute__((aligned(16))) list[262144];


CSandbergUI::CSandbergUI()
{
	framebuffer = 0;
	rot_stop = ROTSIZE/2;

	pl_name = 0;
	pl_entry = 0;
}

CSandbergUI::~CSandbergUI()
{
	if (pl_name != NULL)
	{
		free(pl_entry);
	}

	if (pl_entry != NULL)
	{
		free(pl_entry);
	}
}

int CSandbergUI::Initialize(char *strCWD)
{	
	Log(LOG_LOWLEVEL, "Initialize:");

	// setup GU
	sceGuInit();

	sceGuStart(GU_DIRECT,::list);
	sceGuDrawBuffer(GU_PSM_8888,(void*)0,BUF_WIDTH);
	sceGuDispBuffer(SCR_WIDTH,SCR_HEIGHT,(void*)0x88000,BUF_WIDTH);
	sceGuDepthBuffer((void*)0x110000,BUF_WIDTH);
	sceGuOffset(2048 - (SCR_WIDTH/2),2048 - (SCR_HEIGHT/2));
	sceGuViewport(2048,2048,SCR_WIDTH,SCR_HEIGHT);
	sceGuDepthRange(0xc350,0x2710);
	sceGuScissor(0,0,SCR_WIDTH,SCR_HEIGHT);
	sceGuEnable(GU_SCISSOR_TEST);
	sceGuDepthFunc(GU_GEQUAL);
	sceGuEnable(GU_DEPTH_TEST);
	sceGuFrontFace(GU_CW);
	sceGuShadeModel(GU_SMOOTH);
	sceGuEnable(GU_CULL_FACE);
	sceGuEnable(GU_LIGHTING);
	sceGuEnable(GU_LIGHT0);
	sceGuFinish();
	sceGuSync(0,0);

	sceDisplayWaitVblankStart();
	sceGuDisplay(GU_TRUE);

	sceKernelDcacheWritebackAll();

	InitPL();
	InitFX();

	Log(LOG_LOWLEVEL, "Initialize: completed");
	return 0;
}

void CSandbergUI::Terminate()
{
	Log(LOG_INFO, "Terminate:");
	sceGuTerm();
	Log(LOG_INFO, "Terminate: completed");
}

int CSandbergUI::SetTitle(char *strTitle)
{
	return 0;
}

int CSandbergUI::DisplayMessage_EnablingNetwork()
{
	return 0;
}

int CSandbergUI::DisplayMessage_NetworkSelection(int iProfileID, char *strProfileName)
{
	return 0;
}

int CSandbergUI::DisplayMessage_DisablingNetwork()
{
	return 0;
}

int CSandbergUI::DisplayMessage_NetworkReady(char *strIP)
{
	return 0;
}

int CSandbergUI::DisplayMainCommands()
{
	return 0;
}

int CSandbergUI::DisplayActiveCommand(CPSPSound::pspsound_state playingstate)
{
	switch(playingstate)
	{
		case CPSPSound::STOP:
		case CPSPSound::PAUSE:
			{
			rot_stop = ROTSIZE/2;
			for (int i = 0 ; i < 2*3 ; i++)
				{
				::stop_button[i].color  = ACTIVE_COLOR;
				::play_button[i].color  = INACTIVE_COLOR;
				}
			}
			break;
		case CPSPSound::PLAY:
			{
			rot_stop = 0;
			for (int i = 0 ; i < 2*3 ; i++)
				{
				::stop_button[i].color  = INACTIVE_COLOR;
				::play_button[i].color  = ACTIVE_COLOR;
				}
			}
			break;
	}
	sceKernelDcacheWritebackAll();

	return 0;
}


int CSandbergUI::DisplayErrorMessage(char *strMsg)
{
	return 0;
}

int CSandbergUI::DisplayBufferPercentage(int iPercentage)
{
	return 0;
}

int CSandbergUI::OnNewStreamStarted()
{
	return 0;
}

int CSandbergUI::OnStreamOpening()
{
	return 0;
}

int CSandbergUI::OnStreamOpeningError()
{
	return 0;
}

int CSandbergUI::OnStreamOpeningSuccess()
{
	return 0;
}

int CSandbergUI::OnVBlank()
{
	sceGuStart(GU_DIRECT,::list);

	sceGuClearColor(0x00AA6633);
	sceGuClearDepth(0);
	sceGuClear(GU_COLOR_BUFFER_BIT|GU_DEPTH_BUFFER_BIT);

	{
		ScePspFVector3 pos = { 0, 0, 1.0f };
		sceGuLight(0,GU_DIRECTIONAL,GU_DIFFUSE_AND_SPECULAR,&pos);
		sceGuLightColor(0,GU_DIFFUSE,0xffffffff);
		sceGuLightColor(0,GU_SPECULAR,0xffffffff);
		sceGuLightAtt(0,1.0f,1.0f,0.0f);
	}
	sceGuSpecular(1.0f);
	sceGuAmbient(0x202020);

	sceGumMatrixMode(GU_PROJECTION);
	sceGumLoadIdentity();
	sceGumPerspective(75.0f,16.0f/9.0f,0.5f,1000.0f);

	sceGumMatrixMode(GU_VIEW);
	sceGumLoadIdentity();

	RenderLogo();
	RenderCommands();
	RenderFX();
	RenderPL();
	RenderState();

	sceGuFinish();
	sceGuSync(0,0);

	framebuffer = sceGuSwapBuffers();
	return 0;
}

int CSandbergUI::OnNewSongData(CPlayList::songmetadata *pData)
{
	return 0;
}

int CSandbergUI::DisplayPLList(CDirList *plList)
{

	if (pl_name != NULL)
	{
		free(pl_name);
		pl_name = NULL;
	}

	pl_name = (char *) malloc(strlen(plList->GetCurrentURI()));

	if(pl_name)
	{
		strcpy(pl_name, plList->GetCurrentURI());
	}

	return 0;
}

int CSandbergUI::DisplayPLEntries(CPlayList *PlayList)
{
	CPlayList::songmetadata Data;
	int iRet;

	if (pl_entry != NULL)
	{
		free(pl_entry);
		pl_entry = NULL;
	}

	iRet = PlayList->GetCurrentSong(&Data);

	if (0 == iRet)
	{
		if (strlen(Data.strFileTitle))
		{
			pl_entry = (char *) malloc(strlen(Data.strFileTitle));
			if (pl_entry)
			{	
				strcpy(pl_entry, Data.strFileTitle);
			}
		}
		else
		{
			pl_entry = (char *) malloc(strlen(Data.strFileName));
			if (pl_entry)
			{	
				strcpy(pl_entry, Data.strFileName);
			}
		}
	}

	return 0;
}


int CSandbergUI::OnConnectionProgress()
{
	return 0;
}

void CSandbergUI::RenderState(void)
{
static int rot = 0;

	sceGuEnable(GU_TEXTURE_2D);

	if (rot == ROTSIZE)
		rot = 0;

	// setup Play texture
	sceGuTexFunc(GU_TFX_MODULATE,GU_TCC_RGBA);
	sceGuTexImage(0,16,16,16,::bplay);
	sceGuAmbientColor(0xffffffff);
	sceGuAmbient(0xffffffff);

	/* Render Play button */
	sceGumMatrixMode(GU_MODEL);
	sceGumLoadIdentity();
	{
		ScePspFVector3 pos = { 	 0.0  + ::sintable[(rot+0)%ROTSIZE],
					-1.3,
					-3.0f + ::costable[(rot+0)%ROTSIZE]};
		sceGumTranslate(&pos);
	}
	sceGumDrawArray(GU_TRIANGLES,GU_TEXTURE_32BITF|GU_COLOR_8888|GU_VERTEX_32BITF|GU_TRANSFORM_3D,2*3,0,::play_button);

	// setup Stop texture
	sceGuTexImage(0,16,16,16,::bstop);
	/* Render Stop button */
	sceGumMatrixMode(GU_MODEL);
	sceGumLoadIdentity();
	{
		ScePspFVector3 pos = { 	 0.0  + ::sintable[(rot+ROTSIZE/2)%ROTSIZE],
					-1.3,
					-3.0f + ::costable[(rot+ROTSIZE/2)%ROTSIZE]};
		sceGumTranslate(&pos);
	}
	sceGumDrawArray(GU_TRIANGLES,GU_TEXTURE_32BITF|GU_COLOR_8888|GU_VERTEX_32BITF|GU_TRANSFORM_3D,2*3,0,::stop_button);

	sceGuDisable(GU_TEXTURE_2D);

	if (rot != rot_stop)
		rot++;
}
